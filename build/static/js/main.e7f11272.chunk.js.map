{"version":3,"sources":["Components/headings/PageHeading.js","Components/layout/Container.js","Components/form/Input.js","Components/form/Form.js","Components/form/Button.js","styles/GlobalStyle.js","styles/Theme.js","App.js","serviceWorker.js","index.js"],"names":["PageHeading","styled","h2","props","theme","primaryColour","Container","div","StyledInput","input","borderColour","colour","Input","console","log","placeholder","Form","form","Button","button","DangerButton","dangerColour","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SAGA,IAGeA,EAHKC,IAAOC,GAAV,KACL,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,iB,0HCHjC,IAQeC,EARGL,IAAOM,IAAV,K,0QCEf,IAAMC,EAAcP,IAAOQ,MAAV,KAKO,SAACN,GAAD,OAAWA,EAAMC,MAAMM,gBAC3B,SAACP,GAAD,OAAWA,EAAMQ,UAEpB,SAACR,GAAD,OAAWA,EAAMQ,UASnBC,MALf,SAAeT,GAEX,OADAU,QAAQC,IAAIX,GACL,kBAACK,EAAD,CAAaO,YAAaZ,EAAMY,YAAaJ,OAAQR,EAAMQ,U,gICftE,IAOeK,EAPFf,IAAOgB,KAAV,K,sXCCV,IAAMC,EAASjB,IAAOkB,OAAV,KAEY,SAAChB,GAAD,OAAWA,EAAMC,MAAMC,iBAQhCa,IAEFE,EAAenB,YAAOiB,EAAPjB,CAAH,KACD,SAACE,GAAD,OAAWA,EAAMC,MAAMiB,gB,mMCb/C,IASeC,EATKC,YAAH,KCEFnB,EALD,CACVC,cAAc,UACdgB,aAAa,UACbX,aAAa,WCgCFc,MAnBf,WACE,OACE,kBAAC,IAAD,CAAepB,MAAOA,GACpB,kBAAC,EAAD,MACI,kBAAC,EAAD,KACJ,kBAAC,EAAD,iBACA,kBAAC,EAAD,KACF,kBAAC,EAAD,CAAOW,YAAY,SACnB,kBAAC,EAAD,CAAOA,YAAY,OAAQJ,OAAO,YAClC,kBAAC,EAAD,kBACA,kBAACS,EAAD,mBCdgBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.e7f11272.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\n\nconst PageHeading = styled.h2`\n    color:${props => props.theme.primaryColour}\n`;\nexport default PageHeading;\n\n\n//const PageHeading = styled.h2`\n  //  color:${function(props){\n    //    return props.theme.primaryColour;\n    //}} ;  \n//`;\n\n// export default PageHeading\n\n","import styled from 'styled-components'\nconst Container = styled.div`\n\nmax-width:1100px;\nmargin:0 auto;\npadding:2em;\n`;\n\n\nexport default Container","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledInput = styled.input`\n    padding: 0.5rem;\n    height: 50px;\n    border-radius: 10px;\n    margin-bottom: 1rem;\n    border: 1px solid ${(props) => props.theme.borderColour};\n    border-color: ${(props) => props.colour};\n    &::placeholder {\n        color: ${(props) => props.colour};\n    }\n`;\n\nfunction Input(props) {\n    console.log(props);\n    return <StyledInput placeholder={props.placeholder} colour={props.colour} />;\n}\n\nexport default Input ;","import styled from \"styled-components\";\n\nconst Form = styled.form\n`\ndisplay:flex;\nflex-direction:column;\nmax-width:400px;\n`;\n\nexport default Form","\nimport styled from \"styled-components\";\n\nconst Button = styled.button`\n    color: white;\n    background-color: ${(props) => props.theme.primaryColour};\n    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);\n    height: 70px;\n    border-radius: 10px;\n    border: none;\n    margin-bottom: 1rem;\n`;\n\nexport default Button;\n\nexport const DangerButton = styled(Button)`\n    background-color: ${(props) => props.theme.dangerColour};\n    height: 45px;\n`;","\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        margin: 0;\n        padding: 0;\n        background: #ebebeb;\n        font-family: sans-serif;\n    }\n`;\n\nexport default GlobalStyle;\n\n\n\n","const theme = {\n    primaryColour:\"#97c386\",\n    dangerColour:\"#D17394\",\n    borderColour:\"#cccccc\",\n};\nexport default theme","import React from 'react';\nimport {ThemeProvider} from \"styled-components\";\nimport PageHeading from './Components/headings/PageHeading';\nimport Container from './Components/layout/Container';\nimport Input from './Components/form/Input';\nimport Form from './Components/form/Form';\nimport Button, {DangerButton}  from './Components/form/Button';\nimport GlobalStyle from './styles/GlobalStyle';\n\nimport theme from './styles/Theme';\n\n\n\n\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n          <Container>\n      <PageHeading>Register</PageHeading>\n      <Form>\n    <Input placeholder=\"Name\" />\n    <Input placeholder=\"City\"  colour=\"#5D94D5\" />\n    <Button>Registrer</Button>\n    <DangerButton>Cancel</DangerButton>\n      </Form>\n\n    </Container>\n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}